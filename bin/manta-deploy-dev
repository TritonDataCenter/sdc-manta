#!/bin/bash
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#

#
# Copyright 2020 Joyent, Inc.
#

#
# deploy-dev: deploys a manta install on a coal or lab system
#

if [[ -n "$TRACE" ]]; then
    export PS4='[\D{%FT%TZ}] ${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
    set -o xtrace
fi
set -o errexit
set -o pipefail


# Must be kept in sync with the value in lib/common.js
RING_EXISTS_EXIT_STATUS=3


# ---- internal functions

function usage () {
	echo "Usage:"
	echo "    $(basename $0) [OPTIONS] coal|lab"
	echo ""
	echo "Options:"
	echo "    -h            Show this help and exit."
	echo "    -y            Skip confirmations."
	echo ""
	echo "  Buckets metadata tier options:"
	echo "    -b NUM        The number of buckets vnodes. By default this is"
	echo "                  4 for 'coal' size and 16 for 'lab' size."
	echo ""
	echo "  'lab' options:"
	echo "    -s SERVERS    Comma-separated list of server UUIDs to use for"
	echo "                  for deployment. Defaults to all servers."
	echo "    -S SERVERS    Comma-separated list of server UUIDs to use for"
	echo "                  for deployment of *storage* instances. Defaults"
	echo "                  the value for '-s SERVERS'."
	echo "    -1 SVCNAMES   Comma-separated list of service names for which"
	echo "                  to ensure at least one instance is deployed to"
	echo "                  the headnode, for developer convenience."
}

#
# fail ERRMESSAGE: prints the error message to stderr and exits
#
function fail
{
	echo "$(basename $0): $@" >&2
	exit 1
}

#
# confirm MESSAGE: prompt the user with MESSAGE and returns success only ifi
# they reply with "y" or "Y".
#
function confirm
{
	# Skip all confirmations if "-y" was given on the command line.
	[[ "$mdl_override" == "true" ]] && return

	# Prompt the user with the message we were given.
	read -p "$@" -n 1

	# Print a newline, regardless of what they typed.
	echo

	# Return success iff the user typed "y" or "Y".
	[[ $REPLY =~ ^[Yy]$ ]]
}


# ---- mainline

mdl_tmpdir="${TMPDIR:-/var/tmp}"
mdl_conffile="$mdl_tmpdir/lab-config.json"
mdl_override="false"		# override confirmation prompts
mdl_size=			# manta-adm genconfig 'SIZE' arg
mdl_servers=			# manta-adm genconfig '-s SERVERS' opt
mdl_storage_servers=		# manta-adm genconfig '-S SERVERS' opt
mdl_one_on_headnode=		# manta-adm genconfig '-1 SVCNAMES' opt
mdl_buckets_topo_size=		# The number of Buckets metadata tier vnodes

while getopts "hys:S:1:b:" opt; do
	case "$opt" in
	h)
		usage
		exit 0
		;;
	y)
		mdl_override="true"
		;;
	s)
		mdl_servers=$OPTARG
		;;
	S)
		mdl_storage_servers=$OPTARG
		;;
	1)
		mdl_one_on_headnode=$OPTARG
		;;
	b)
		mdl_buckets_topo_size=$OPTARG
		;;
	*)
		echo "error: invalid option '-$opt'" >&2
		usage
		exit 2
		;;
	esac
done
shift $(( OPTIND - 1 ))

case "$1" in
	coal)
		mdl_size="coal"
		mdl_dir_index_shards="1.moray"
		mdl_dir_topo_size=100000
		mdl_buckets_index_shards="1.buckets-mdapi"
		if [[ -z "$mdl_buckets_topo_size" ]]; then
			mdl_buckets_topo_size=4
		fi
		;;
	lab)
		mdl_size="lab"
		mdl_dir_index_shards="1.moray 2.moray"
		mdl_dir_topo_size=131072
		mdl_buckets_index_shards="1.buckets-mdapi 2.buckets-mdapi"
		if [[ -z "$mdl_buckets_topo_size" ]]; then
			mdl_buckets_topo_size=16
		fi
		;;
	*)
		echo "error: invalid genconfig size: must be one of 'coal' or 'lab'" >&2
		usage
		exit 2
		;;
esac

echo "genconfig size:          $mdl_size" >&2
echo "dir index shards:        $mdl_dir_index_shards" >&2
echo "dir vnodes:              $mdl_dir_topo_size" >&2
echo "buckets index shards:    $mdl_buckets_index_shards" >&2
echo "buckets vnodes:          $mdl_buckets_topo_size" >&2
echo "deploy servers:          $mdl_servers" >&2
echo "deploy storage servers:  $mdl_storage_servers" >&2
echo "deploy one on headnode:  $mdl_one_on_headnode" >&2


# Directory API shard/topology setup

manta-shardadm set -i "$mdl_dir_index_shards"
manta-shardadm set -s "1.moray"

set +o errexit
manta-adm create-topology -t directory -v $mdl_dir_topo_size -p 2020
case "$?" in
	${RING_EXISTS_EXIT_STATUS})
		echo "dir hash ring (topology) already exists"
		;;
	0)
		echo "successfully generated dir hash ring (topology)"
		;;
	*)
		fail "could not generate dir hash ring (topology)"
esac
set -o errexit


# Buckets API shard/topology setup

manta-shardadm set -b "$mdl_buckets_index_shards"

set +o errexit
manta-adm create-topology -t buckets -v $mdl_buckets_topo_size -p 2030
case "$?" in
	${RING_EXISTS_EXIT_STATUS})
		echo "buckets hash ring (topology) already exists"
		;;
	0)
		echo "successfully generated buckets hash ring (topology)"
		;;
	*)
		fail "could not generate buckets hash ring (topology)"
esac
set -o errexit


# Deploy nameservice first
#
# Dev Note: I'm not sure this is required or helpful. `manta-adm update` will
# ensure nameservice is setup first. Perhaps it should also wait to ensure
# nameservice is up and working before proceeding.

genconfig_opts=
if [[ -n "$mdl_servers" ]]; then
    genconfig_opts+=" -s $mdl_servers"
fi
if [[ -n "$mdl_storage_servers" ]]; then
    genconfig_opts+=" -S $mdl_storage_servers"
fi
if [[ -n "$mdl_one_on_headnode" ]]; then
    genconfig_opts+=" -1 $mdl_one_on_headnode"
fi
manta-adm genconfig $genconfig_opts $mdl_size > $mdl_conffile
manta-adm update --skip-verify-channel -y $mdl_conffile nameservice

set +o xtrace
cat <<-EOF
Nameservice zones deployed.  You should check that they came up properly
by running "svcs -Zxv" in the global zone.  You should only proceed once
those zones are up and running.
EOF
confirm "Are you ready to proceed? (y/N) " || fail "aborted by user"


# Deploy the rest
manta-adm update --skip-verify-channel -y $mdl_conffile


# Configure GC
manta-adm gc gen-shard-assignment > $mdl_tmpdir/gc-shard-assignment.json
manta-adm gc update $mdl_tmpdir/gc-shard-assignment.json
